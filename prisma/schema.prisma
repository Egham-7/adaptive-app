enum OrganizationMemberRole {
  owner
  admin
  member
}

enum ProjectStatus {
  active
  inactive
  paused
}

enum ProjectMemberRole {
  owner
  admin
  member
}


enum RequestType {
  completion
  chat
  embedding
  image
  audio
}

enum CreditTransactionType {
  purchase
  usage
  refund
  promotional
}

enum FallbackMode {
  sequential
  race
}

enum ProviderVisibility {
  system
  project
  organization
  community
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

model Conversation {
  id        Int       @id @default(autoincrement())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String

  messages Message[]
  pinned   Boolean   @default(false)

  @@index([deletedAt])
}

model Message {
  id   String @id @default(cuid())
  role String

  metadata    Json?
  annotations Json?
  parts       Json

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int

  @@index([deletedAt])
  @@index([conversationId])
  @@index([role])
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  description String?
  ownerId     String    // Clerk user ID who owns this organization
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  projects    Project[]
  members     OrganizationMember[]
  credit      OrganizationCredit?
  
  @@index([ownerId])
  @@index([name])
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String       // Clerk user ID
  organizationId String
  role           OrganizationMemberRole       // 'owner' | 'admin' | 'member'
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Project {
  id             String       @id @default(cuid())
  name           String
  description    String?
  status         ProjectStatus       @default(active) // 'active' | 'inactive' | 'paused'
  progress       Int          @default(0)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members        ProjectMember[]
  usage          ApiUsage[]
  llmClusters    LLMCluster[]
  providers      Provider[]
  providerConfigs ProviderConfig[]
  
  @@index([organizationId])
  @@index([status])
}

model ProjectMember {
  id        String   @id @default(cuid())
  userId    String   // Clerk user ID
  projectId String
  role      ProjectMemberRole   // 'owner' | 'admin' | 'member'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

model ApiUsage {
  id                String   @id @default(cuid())
  projectId         String?
  clusterId         String?  // LLM cluster used for this request
  provider          String?  // Provider name (e.g., 'openai', 'anthropic', 'custom-provider')
  model             String?   // Model name used
  requestType       RequestType   // 'completion' | 'chat' | 'embedding' | 'image' | 'audio'
  inputTokens       Int      @default(0)
  outputTokens      Int      @default(0)
  totalTokens       Int      @default(0)
  cost              Decimal  @default(0) @db.Decimal(12,6)
  creditCost        Decimal  @default(0) @db.Decimal(12,6) // Cost deducted from user credits
  requestCount      Int      @default(1)
  timestamp         DateTime @default(now())
  metadata          Json?    // Additional request metadata

  project           Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  cluster           LLMCluster? @relation(fields: [clusterId], references: [id], onDelete: SetNull)
  creditTransactions CreditTransaction[]

  @@index([projectId])
  @@index([clusterId])
  @@index([provider])
  @@index([timestamp])
  @@index([requestType])
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  stripeCustomerId     String?   @unique
  stripePriceId        String?
  stripeSubscriptionId String?   @unique
  status               String // 'active' | 'canceled' | 'past_due' | 'unpaid'
  currentPeriodEnd     DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([userId])
  @@index([status])
}

model Provider {
  id              String             @id @default(cuid())
  projectId       String?            // Required for project/organization visibility, null for system/community
  name            String             // 'openai' | 'anthropic' | 'custom-provider-name'
  displayName     String             // 'OpenAI' | 'Anthropic' | 'My Custom Provider'
  description     String?
  visibility      ProviderVisibility @default(project) // system | project | organization | community
  
  // Provider template configuration (no secrets)
  baseUrl         String?            // API base URL for custom providers (e.g., "https://api.custom.com/v1")
  authType        String?            // "bearer" | "api_key" | "basic" | "custom"
  authHeaderName  String?            // Custom auth header name (default: "Authorization")
  healthEndpoint  String?            // Health check endpoint (e.g., "/health")
  rateLimitRpm    Int?               // Rate limit requests per minute
  timeoutMs       Int?               // Request timeout in milliseconds
  retryConfig     Json?              // Custom retry configuration
  headers         Json?              // Additional headers to send with requests
  
  createdBy       String?            // User ID who created this provider (for community providers)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  project         Project?           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  models          ProviderModel[]
  configs         ProviderConfig[]   // User configurations for this provider
  clusterProviders ClusterProvider[] // Clusters using this provider
  
  @@unique([projectId, name])
  @@index([projectId])
  @@index([visibility])
  @@index([name])
  @@index([createdBy])
}

model ProviderConfig {
  id              String    @id @default(cuid())
  projectId       String    // Always project-scoped
  providerId      String    // References Provider template
  
  // User's custom configuration
  displayName     String?   // User's custom name for this config
  providerApiKey  String    @db.VarChar(500) // User's API key for this provider
  customHeaders   Json?     // User's additional headers
  customSettings  Json?     // User's custom configuration overrides
  
  // Model selection: if selectedModels is empty/null, use all provider models
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  provider        Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  selectedModels  ProviderConfigModel[] // Specific model selections when useAllModels is false
  clusterProviders ClusterProvider[] // Clusters using this specific config
  
  @@unique([projectId, providerId]) // One config per provider per project
  @@index([projectId])
  @@index([providerId])
}

model ProviderModel {
  id              String    @id @default(cuid())
  providerId      String
  name            String    // Model name like 'gpt-4' | 'claude-3-opus' | 'gemini-pro'
  displayName     String    // Human readable name
  inputTokenCost  Decimal   @db.Decimal(12,6) // Cost per 1M input tokens
  outputTokenCost Decimal   @db.Decimal(12,6) // Cost per 1M output tokens
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  provider        Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  capabilities    ModelCapability?
  configModels    ProviderConfigModel[] // Configurations that selected this model
  
  @@unique([providerId, name])
  @@index([providerId])
  @@index([name])
  @@index([inputTokenCost])
  @@index([outputTokenCost])
}

model ModelCapability {
  id                      String    @id @default(cuid())
  providerModelId         String    @unique
  description             String?
  maxContextTokens        Int?      // Maximum context window size
  maxOutputTokens         Int?      // Maximum output tokens
  supportsFunctionCalling Boolean   @default(false)
  languagesSupported      String[]  // Array of supported language codes
  modelSizeParams         String?   // Model size information (e.g., "7B", "70B")
  latencyTier             String?   // "low" | "medium" | "high"
  taskType                String?   // Specialized task type (e.g., "reasoning", "code", "chat")
  complexity              String?   // "low" | "medium" | "high"
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  providerModel           ProviderModel @relation(fields: [providerModelId], references: [id], onDelete: Cascade)
  
  @@index([latencyTier])
  @@index([taskType])
  @@index([complexity])
  @@index([maxContextTokens])
  @@index([supportsFunctionCalling])
}

// Credit system models
model OrganizationCredit {
  id              String    @id @default(cuid())
  organizationId  String    @unique // Organization ID
  balance         Decimal   @default(0) @db.Decimal(12,6) // Current credit balance in USD
  totalPurchased  Decimal   @default(0) @db.Decimal(12,6) // Total credits ever purchased
  totalUsed       Decimal   @default(0) @db.Decimal(12,6) // Total credits ever used
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  transactions    CreditTransaction[]
  
  @@index([organizationId])
}

model CreditTransaction {
  id              String    @id @default(cuid())
  organizationId  String    // Organization ID
  userId          String    // Clerk user ID who initiated the transaction
  type            CreditTransactionType // 'purchase' | 'usage' | 'refund' | 'promotional'
  amount          Decimal   @db.Decimal(12,6) // Amount in USD (positive for credits added, negative for usage)
  balanceAfter    Decimal   @db.Decimal(12,6) // Organization's balance after this transaction
  description     String?   // Human readable description
  metadata        Json?     // Additional data (Stripe payment ID, API usage details, etc.)
  
  // Stripe-related fields for purchases
  stripePaymentIntentId String? // For one-time credit purchases
  stripeSessionId       String? // Checkout session that created this transaction

  // API usage-related fields
  apiUsageId      String?   // Link to the specific API usage record

  createdAt       DateTime  @default(now())

  organizationCredit OrganizationCredit @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade)
  apiUsage        ApiUsage?  @relation(fields: [apiUsageId], references: [id], onDelete: SetNull)

  @@index([organizationId])
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([stripePaymentIntentId])
}

model CreditPackage {
  id              String    @id @default(cuid())
  name            String    // e.g., "Starter Pack", "Pro Pack"
  description     String?   // Description of the package
  creditAmount    Decimal   @db.Decimal(12,6) // Amount of credits in USD
  price           Decimal   @db.Decimal(12,6) // Price in USD
  stripePriceId   String    @unique // Stripe price ID for this package
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
}

// Intelligent LLM Cluster - Adapter pattern for ChatCompletionRequest configuration
model LLMCluster {
  id          String    @id @default(cuid())
  projectId   String    // Project this cluster belongs to
  name        String    // User-defined name (e.g., "Production", "Fast", "Cheap")
  description String?   // Optional description
  
  // Fallback Config fields
  fallbackEnabled      Boolean      @default(true)
  fallbackMode         FallbackMode @default(race)
  
  // Protocol Manager Config fields
  enableCircuitBreaker Boolean      @default(true)
  maxRetries          Int          @default(3)
  timeoutMs           Int          @default(30000)
  costBias            Float        @default(0.5)      // 0.0 = prioritize cost, 1.0 = prioritize performance
  complexityThreshold Float?                          // Optional complexity threshold for model selection
  tokenThreshold      Int?                            // Optional token threshold for model selection
  
  // Semantic Cache Config
  enableSemanticCache Boolean      @default(true)
  semanticThreshold   Float        @default(0.85)     // Similarity threshold for semantic cache hits
  
  // Prompt Cache Config
  enablePromptCache   Boolean      @default(true)
  promptCacheTTL      Int          @default(3600)     // TTL in seconds
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  providers   ClusterProvider[] // Junction table to providers
  usage       ApiUsage[]
  
  @@unique([projectId, name])
  @@index([projectId])
}



// Junction table for clusters to configure which providers they use
model ClusterProvider {
  id           String    @id @default(cuid())
  clusterId    String    
  providerId   String    // References Provider template
  configId     String?   // Optional: specific ProviderConfig if user wants custom config
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  cluster      LLMCluster      @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  provider     Provider        @relation(fields: [providerId], references: [id], onDelete: Cascade)
  config       ProviderConfig? @relation(fields: [configId], references: [id], onDelete: SetNull)
  
  @@unique([clusterId, providerId])
  @@index([clusterId])
  @@index([providerId])
  @@index([configId])
}

// Junction table for provider config model selections (when selectedModels is empty, use all models)
model ProviderConfigModel {
  id               String    @id @default(cuid())
  providerConfigId String    // References ProviderConfig
  providerModelId  String    // References ProviderModel
  priority         Int       @default(0) // Order preference for model selection
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  config    ProviderConfig @relation(fields: [providerConfigId], references: [id], onDelete: Cascade)
  model     ProviderModel @relation(fields: [providerModelId], references: [id], onDelete: Cascade)
  
  @@unique([providerConfigId, providerModelId])
  @@index([providerConfigId])
  @@index([providerModelId])
  @@index([priority])
}


