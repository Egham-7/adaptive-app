enum OrganizationMemberRole {
  owner
  admin
  member
}

enum ProjectStatus {
  active
  inactive
  paused
}

enum ProjectMemberRole {
  owner
  admin
  member
}

enum CreditTransactionType {
  purchase
  usage
  refund
  promotional
}

enum FallbackMode {
  sequential
  race
}

enum ProviderVisibility {
  system
  project
  organization
  community
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

model Conversation {
  id        Int       @id @default(autoincrement())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String

  messages Message[]
  pinned   Boolean   @default(false)

  @@index([deletedAt])
}

model Message {
  id   String @id @default(cuid())
  role String

  metadata    Json?
  annotations Json?
  parts       Json

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int

  @@index([deletedAt])
  @@index([conversationId])
  @@index([role])
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String // Clerk user ID who owns this organization
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projects Project[]
  members  OrganizationMember[]
  credit   OrganizationCredit?

  @@index([ownerId])
  @@index([name])
}

model OrganizationMember {
  id             String                 @id @default(cuid())
  userId         String // Clerk user ID
  organizationId String
  role           OrganizationMemberRole // 'owner' | 'admin' | 'member'
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Project {
  id             String        @id @default(cuid())
  name           String
  description    String?
  status         ProjectStatus @default(active) // 'active' | 'inactive' | 'paused'
  progress       Int           @default(0)
  organizationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  organization Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members      ProjectMember[]

  @@index([organizationId])
  @@index([status])
}

model ProjectMember {
  id        String            @id @default(cuid())
  userId    String // Clerk user ID
  projectId String
  role      ProjectMemberRole // 'owner' | 'admin' | 'member'
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  stripeCustomerId     String?   @unique
  stripePriceId        String?
  stripeSubscriptionId String?   @unique
  status               String // 'active' | 'canceled' | 'past_due' | 'unpaid'
  currentPeriodEnd     DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([userId])
  @@index([status])
}

// Credit system models
model OrganizationCredit {
  id             String   @id @default(cuid())
  organizationId String   @unique // Organization ID
  balance        Decimal  @default(0) @db.Decimal(12, 6) // Current credit balance in USD
  totalPurchased Decimal  @default(0) @db.Decimal(12, 6) // Total credits ever purchased
  totalUsed      Decimal  @default(0) @db.Decimal(12, 6) // Total credits ever used
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  transactions CreditTransaction[]

  @@index([organizationId])
}

model CreditTransaction {
  id             String                @id @default(cuid())
  organizationId String // Organization ID
  userId         String // Clerk user ID who initiated the transaction
  type           CreditTransactionType // 'purchase' | 'usage' | 'refund' | 'promotional'
  amount         Decimal               @db.Decimal(12, 6) // Amount in USD (positive for credits added, negative for usage)
  balanceAfter   Decimal               @db.Decimal(12, 6) // Organization's balance after this transaction
  description    String? // Human readable description
  metadata       Json? // Additional data (Stripe payment ID, API usage details, etc.)

  // Stripe-related fields for purchases
  stripePaymentIntentId String? // For one-time credit purchases
  stripeSessionId       String? // Checkout session that created this transaction

  // API usage-related fields (references to adaptive-proxy data)
  apiKeyId   Int? // Reference to API key in adaptive-proxy (not a foreign key)
  apiUsageId Int? // Reference to usage record in adaptive-proxy (not a foreign key)

  createdAt DateTime @default(now())

  organizationCredit OrganizationCredit @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([stripePaymentIntentId])
  @@index([apiKeyId])
}

model CreditPackage {
  id            String   @id @default(cuid())
  name          String // e.g., "Starter Pack", "Pro Pack"
  description   String? // Description of the package
  creditAmount  Decimal  @db.Decimal(12, 6) // Amount of credits in USD
  price         Decimal  @db.Decimal(12, 6) // Price in USD
  stripePriceId String   @unique // Stripe price ID for this package
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
