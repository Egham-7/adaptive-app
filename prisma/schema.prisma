enum OrganizationMemberRole {
  owner
  admin
  member
}

enum ProjectStatus {
  active
  inactive
  paused
}

enum ProjectMemberRole {
  owner
  admin
  member
}

enum CreditTransactionType {
  purchase
  usage
  refund
  promotional
}

enum FallbackMode {
  sequential
  race
}

enum ProviderVisibility {
  system
  project
  organization
  community
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

model Conversation {
  id        Int       @id @default(autoincrement())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String

  messages Message[]
  pinned   Boolean   @default(false)

  @@index([deletedAt])
}

model Message {
  id   String @id @default(cuid())
  role String

  metadata    Json?
  annotations Json?
  parts       Json

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int

  @@index([deletedAt])
  @@index([conversationId])
  @@index([role])
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String // Clerk user ID who owns this organization
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projects Project[]
  members  OrganizationMember[]

  @@index([ownerId])
  @@index([name])
}

model OrganizationMember {
  id             String                 @id @default(cuid())
  userId         String // Clerk user ID
  organizationId String
  role           OrganizationMemberRole // 'owner' | 'admin' | 'member'
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Project {
  id             String        @id @default(cuid())
  name           String
  description    String?
  status         ProjectStatus @default(active) // 'active' | 'inactive' | 'paused'
  progress       Int           @default(0)
  organizationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  organization Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members      ProjectMember[]

  @@index([organizationId])
  @@index([status])
}

model ProjectMember {
  id        String            @id @default(cuid())
  userId    String // Clerk user ID
  projectId String
  role      ProjectMemberRole // 'owner' | 'admin' | 'member'
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  stripeCustomerId     String?   @unique
  stripePriceId        String?
  stripeSubscriptionId String?   @unique
  status               String // 'active' | 'canceled' | 'past_due' | 'unpaid'
  currentPeriodEnd     DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([userId])
  @@index([status])
}
